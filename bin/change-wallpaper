#!/usr/bin/env bash
# change-wallpaper
# author | cherrynoize
# https://github.com/cherrynoize

# we cd here to set a relative wallpaper dir symlink
working_dir="$HOME"

# path to wallpaper dir
wallpaper_dir="$HOME/.wallpaper-themes/current/wallpaper"

# location for link to current wallpaper
wall_link="$HOME/.current-wallpaper"

# default firefox profile
ff_profile="$FF_DEFAULT_PROFILE"

# set link to ff wallpaper
if [ -n "$ff_profile" ]; then
  if [ ! -d "$ff_profile" ]; then
    ff_profile="${FF_PROFILE_DIR:-"$HOME/.mozilla/firefox"}/$FF_DEFAULT_PROFILE"
  fi

  if [ ! -d "$ff_profile" ]; then
    echo "error: Firefox profile '$FF_DEFAULT_PROFILE' not found"
  else
    mkdir -p "$ff_profile/chrome/images"
    ff_wall_link="$ff_profile/chrome/images/wallpaper"
  fi
fi

# current wallpaper name
current_wall="$(wpg -c)"

# notification id
nid="1234"

notification () {
  if [ -n "$use_notification" ]; then
    notify-send -r "$nid" "$1" "$2"
  fi
}

# update symlink to current wallpaper
update_wall_symlink () {
  # remove old symlink
  if [ -L "$1" ]; then
    rm "$1"
  fi

  # create new symlink
  if [ ! -e "$1" ]; then
    ln -s "$wall_path" "$1"
  else
    echo "warning: '$1' is not a symlink"
    echo "ignoring symlink creation"
  fi
}

# update ff wallpaper
update_ff_wall_link () {
  [ -e "$1" ] && rm "$1"
  ln "$wall_path" "$1"
}

cd "$working_dir" || {
  echo "error: failed to cd to $working_dir"
  exit 4
}

while [ -n "$1" ]; do
  case "$1" in
    -l|--list)
      cmd=list
      ;;
    -R|--random)
      cmd=random
      ;;
    -r|--reload)
      cmd=set
      wall="$current_wall"
      ;;
    -n|--notification)
      use_notification=1
      ;;
    -v|--verbose)
      verbose=1
      ;;
    *)
      cmd=set
      wall="$1" # set wallpaper name
      ;;
  esac
  shift
done

case "$cmd" in
  list)
    ls "$wallpaper_dir" "$@"
    exit
    ;;
  ""|random)
    if [ ! -d "$wallpaper_dir" ]; then
      echo "error: no wallpaper theme currently set"
      echo "try running \`switch-theme wallpaper [theme]\`"
      notification "No wallpaper theme"
      exit 5
    elif [ -z "$(ls "$wallpaper_dir")" ]; then
      echo "error: no wallpaper available for current mode"
      echo "try switching mode or theme"
      if [ -z "$verbose" ]; then
        notification "No wallpaper found"
      else
        cur_mode="$(switch-mode -c)"
        notification "${cur_mode^} wallpaper not found"
      fi
      exit 6
    fi

    # pick random file in wall dir excluding current wall
    wall="$(random-file "$wallpaper_dir" -I "$current_wall")"
    ;;
esac

wall_path="$wall"
if [ ! -f "$wall_path" ]; then
  wall_path="$wallpaper_dir/$wall"
fi
if [ ! -f "$wall_path" ]; then
  echo "error: wallpaper '$wall' not found"
  exit 4
fi

# fix wal sample coming up in wallpaper dir when called with
# absolute paths
wall="$(basename "$wall_path")"

wpg -a "$wall_path" # add wallpaper
wpg -R "$wall" # reset wallpaper and regenerate colorscheme
wpg -s "$wall" # set wallpaper and colorscheme

update_wall_symlink "$wall_link" # update link to current wallpaper
[ -n "$ff_wall_link" ] && update_ff_wall_link "$ff_wall_link" # update link to wallpaper in ff

# update firefox colorscheme
pywalfox update&

# update screenlock wallpaper cache
n3lock -w "$wall_path"&

# TODO
# - auto-check wpgtk wallpapers cache for size or number of files
#   and remove older ones
#
# BUGS
# - seems not to work with filenames containing spaces, but I
#   believe it might be wpgtk, not us (testing needed)
