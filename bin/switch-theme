#!/usr/bin/env bash
# switch between different themes
# author | cherrynoize
# https://github.com/cherrynoize/dotfiles

# where to store theme history
cache_dir="${XDG_CACHE_HOME:-"$HOME/.cache"}"
hst_dir="$cache_dir/themes/hst"
# extension for history files
hst_ext=.hst
# size for each file (override in switch for single cases)
hst_size=10

# theme to preserve when running for all contexts
preferred_theme=wpgtk
# always keep preferred theme where already set and do not change.
# by default this is only set when run with --all (can be
# inhibited by commenting out preferred_theme.)
#preserve_preferred_theme=false

nid="6699" # notification id

# list of contexts to run when called with --all
declare -a all_ctxs=(
  "wallpaper"
  "eww"
  "polybar"
  "rofi"
  "rofi-colors"
  "bspwm"
  "bspwm-colors"
  "hyprland"
  "alacritty"
  "dunst"
)

# whether a context is not set as a regular theme
declare -A exclude_ctxs=(
  [dunst-app]=true
)

notification () {
  if [ -n "$use_notification" ]; then
    if [ -z "$no_icon" ]; then
      icon="ðŸ–¼ "
    fi

    title="${1:-"$icon${_ctx^} theme set"}"
    body="$2"

    notify-send -r "$nid" "$title" "$body"
  fi
}

# run actions and exit
terminate () {
  eval "$post_exec" || true
}

usage () {
local program_name="$(basename -- "$0")"
cat<<EOF
usage: $program_name [context|-a|--all] [theme|options]
       $program_name --custom <theme> <theme_dir> <active_link> [theme_ext] [command]
context:
  list available contexts with $program_name -l
  -a|--all           runs for each context
  --custom           specify parameters for a custom context
options:
  -t|--toggle        toggle between themes
  -c|--current       show current theme
  -l|--list          list available contexts/themes
  -r|--random        set random theme
  -n|--notification  show notifications
  -I|--no-icon       do not use icons in notification
  -q|--quiet         quiet mode
  --delete-nonlinks  unsets current theme even if not a symlink
  -h|--help          show this help message
EOF
}

get_current_theme () {
  cur_theme="$(readlink "$active_theme_link")"
  echo "${cur_theme%"$theme_ext"}"
}

get_history_file () {
  if [ ! -d "$hst_dir" ]; then
    mkdir -p "$hst_dir"
  fi

  hst_file="$hst_dir/${_ctx}$hst_ext"
  echo "$hst_file"
}

update_history () {
  cur_theme="${1:-"$(get_current_theme)"}"

  # if new theme is not set or is the same as the previous one
  if [ -z "$cur_theme" ] || [ "$cur_theme" = "$new_theme_name" ]; then
    return
  fi

  hst_file="${2:-"$(get_history_file)"}"

  # update history entries
  if [ -f "$hst_file" ]; then
    # remove duplicate entries
    sed -i "/$cur_theme/d" "$hst_file"
    # remove old entries
    hist_buf="$(tail -n $hst_size < "$hst_file")"
    echo "$hist_buf" > "$hst_file"
  fi

  # append current theme to file
  echo "$cur_theme" >> "$hst_file"
}

set_theme () {
  old_theme_mode="$(switch-mode "$_ctx" -c)"

  get_new_theme_with_ext () {
    echo "${new_theme_with_ext:-"$new_theme_name$theme_ext"}"
  }

  update_theme_link () {
    remove_active_theme_link

    # point link to new theme
    echo setting: 'ln -s' "${themes_dir:+"$themes_dir/"}$(get_new_theme_with_ext)" "$active_theme_link"
    ln -s "${themes_dir:+"$themes_dir/"}$(get_new_theme_with_ext)" "$active_theme_link"
  }

  enforce_old_theme_mode () {
    # if previous theme mode was different from new one
    if [ -n "$old_theme_mode" ] && [ "$old_theme_mode" != "$(switch-mode "$_ctx" -c)" ]; then
      switch-mode "$_ctx" "$old_theme_mode"
    fi
  }

  remove_active_theme_link () {
    if [ ! -L "$active_theme_link" ] && [ ! -e "$active_theme_link" ]; then
      return
    fi

    if [ ! "$delete_nonlinks" = "1" ] && [ ! -L "$active_theme_link" ]; then
      echo "$(basename -- "$0"): cannot unset current theme: '$active_theme_link' is not a symlink" > /dev/stderr
      exit 4
    fi

    # update history with current theme
    [ -z "$quiet" ] && update_history

    rm "$active_theme_link" || {
      echo "$(basename -- "$0"): failed to remove active theme link '$active_theme_link'" > /dev/stderr
      exit 4
    }
  }

  if [ -n "$unset_theme" ]; then
    remove_active_theme_link
    exit
  fi

  if [ -z "$preferred_theme" ] || [ "$preserve_preferred_theme" != "true" ] || [ "$current_theme" != "$preferred_theme" ]; then
    if [ "$cmd" = "--random" ]; then
      # set random theme
      new_theme_with_ext="$(random-file "${themes_dir:-"$themes_dir"}" -I "$active_theme_link_name_with_ext" -I "$current_theme")"
    elif [ -z "$new_theme_name" ]; then
      # if no theme is set show usage then exit
      usage
      exit
    fi

    # if new theme is not in exclude_ctxs
    if [ -n "$new_theme_name" ] &&
      [ "${exclude_ctxs[$_ctx]}" != "true" ] &&
      [ ! -e "${themes_dir:-"$themes_dir"}/$(get_new_theme_with_ext)" ]; then
          echo "$(basename -- "$0"): could not find theme '$new_theme_name'"
          exit 3
    fi

    # set new theme if not preferred theme
    update_theme_link
    enforce_old_theme_mode
  fi
}

run_command () {
  active_theme_link_name="$1"
  theme_ext="$2"

  active_theme_link_name_with_ext="$active_theme_link_name$theme_ext"
  theme_link_dir="${active_theme_link_dir:-"$themes_dir"}"
  active_theme_link="${theme_link_dir:+"$theme_link_dir/"}$active_theme_link_name_with_ext"

  current_theme="$(get_current_theme)"

  no_hst_file_err () {
    echo "$(basename -- "$0"): could not find history file. try setting a new theme first or verify permissions for '$(get_history_file)'."
    exit 3
  }

  case "$cmd" in
    ""|--random)
      set_theme
      ;;
    --show)
      # show current theme
      echo "$current_theme"
      exit
      ;;
    --history)
      if hst_file="$(get_history_file)"; then
        # show recently used themes
        tail -n "$history_count" < "$hst_file"
        exit
      else
        no_hst_file_err
      fi
      ;;
    --pop)
      if hst_file="$(get_history_file)"; then
        # delete number of themes from history
        new_history="$(head -n "-$pop_count" < "$hst_file")"
        echo "$new_history" > "$hst_file"
        exit
      else
        no_hst_file_err
      fi
      ;;
    --toggle)
      if hst_file="$(get_history_file)"; then
        # most recent theme
        lst_theme="$(tail -n 1 < "$hst_file")"
        # set most recent theme
        "$0" "$_ctx" "$lst_theme"
        exit
      else
        no_hst_file_err
      fi
      ;;
    --list)
      # list available themes
      ls "${list_opts[@]}" "${themes_dir:-"$themes_dir"}" -I "$active_theme_link_name_with_ext"
      exit
      ;;
    *)
      echo "$(basename -- "$0"): unknown command '$cmd'"
      exit 1
      ;;
  esac
}

# parse cli args
while [ -n "$1" ]; do
  case "$1" in
    -h|--help)
      usage
      exit
      ;;
    -c|--current)
      cmd=--show
      shift
      ;;
    -t|--toggle)
      cmd=--toggle
      shift
      ;;
    -P|--pop)
      cmd=--pop
      if [[ ! $2 =~ ^[0-9]+$ ]]; then
        echo "$(basename -- "$0"): must specify number of lines to pop"
        exit 1
      fi
      pop_count="$2"
      shift 2
      ;;
    -H|--history)
      cmd=--history
      if [[ ! $2 =~ ^[0-9]+$ ]]; then
        echo "$(basename -- "$0"): must specify number of history lines to show"
        exit 1
      fi
      history_count="$2"
      shift 2
      ;;
    -l|--list)
      cmd=--list
      shift
      ;;
    -1)
      list_opts+=("-1")
      shift
      ;;
    -r|--random)
      cmd=--random
      shift
      ;;
    -n|--notification)
      use_notification=1
      shift
      ;;
    -I|--no-icon)
      no_icon=1
      shift
      ;;
    -q|--quiet)
      quiet=1
      shift
      ;;
    --delete-nonlinks)
      delete_nonlinks=1
      shift
      ;;
    --custom)
      _ctx="$1"

      if [ $# -lt 4 ] || [ $# -gt 6 ]; then
        echo "usage: $(basename -- "$0") --custom <theme> <theme_dir> <active_link> [theme_ext] [command]"
        exit 1
      fi

      new_theme_name="$2"

      shift 2
      break
      ;;
    --none|--unset)
      unset_theme=1
      shift
      ;;
    -a|--all)
      # if we have already set a context
      if [ -n "$_ctx" ]; then
        # it becomes the theme
        new_theme_name="$_ctx"
      fi

      # then set the context to all
      _ctx="$1"
      shift
      ;;
    *)
      if [ -z "$_ctx" ]; then
        # set context first
        _ctx="$1"
      else
        # then theme
        new_theme_name="$1"
      fi
      shift
      ;;
  esac
done

# contexts
case "$_ctx" in
  ""|-a|--all)
    case "$cmd" in
      --list)
        if [[ ${list_opts[*]} == *-1* ]]; then
          echo "${all_ctxs[@]}"
        else
          echo "${all_ctxs[*]}"
        fi
        exit
        ;;
      *)
        new_theme="${cmd:-"$new_theme_name"}"
        # run command or set theme for each context
        for c in "${all_ctxs[@]}"; do
          preserve_preferred_theme=true "$0" "$c" "$new_theme"
       done
        ;;
    esac
    ;;
  --custom)
    themes_dir="$1"
    active_theme_link_names=("$2")
    theme_exts=("$3")
    post_exec+="$4"
    ;;
  wallpaper)
    themes_user_dir="$HOME/.wallpaper-themes"
    themes_base_dir="/etc/themes/wallpapers"

    wallpaper_dir="$themes_user_dir/$new_theme_name/wallpaper"
    if [ -d "$wallpaper_dir" ] && [ -n "$(ls -A "$wallpaper_dir")" ]; then
      themes_dir="$themes_user_dir"
    else
      themes_dir="$themes_base_dir"
    fi

    active_theme_link_dir=("$themes_user_dir")
    active_theme_link_names=("current")
    theme_exts=("")
    # set history size to current number of themes
    hst_size="$(($(ls "$themes_base_dir" "$themes_user_dir" | wc -l) - 1))"
    post_exec+="change-wallpaper -n -v;"
    ;;
  eww)
    themes_dir="$HOME/.config/eww/themes"
    active_theme_link_names=("current")
    theme_exts=("")
    post_exec+="dock reload eww;"
    ;;
  polybar)
    themes_dir="$HOME/.config/polybar/themes"
    active_theme_link_names=("current")
    theme_exts=("")
    post_exec+="dock reload polybar;"
    ;;
  rofi)
    themes_dir="$HOME/.config/rofi/themes/"
    active_theme_link_names=("current")
    theme_exts=(".rasi")
    ;;
  rofi-colors)
    themes_dir="$HOME/.config/rofi/colors/"
    active_theme_link_names=("current")
    theme_exts=(".rasi")
    ;;
  bspwm)
    themes_dir="$HOME/.config/bspwm/themes"
    active_theme_link_names=("current")
    theme_exts=("")
    post_exec+="bspc wm -r;"
    ;;
  bspwm-colors)
    themes_dir="$HOME/.config/bspwm/colorschemes"
    active_theme_link_names=("current")
    theme_exts=("")
    post_exec+="bspc wm -r;"
    ;;
  hyprland)
    themes_dir="$HOME/.config/hypr/themes"
    active_theme_link_names=("current")
    theme_exts=("")
    post_exec+="hyprctl reload;"
    ;;
  hyprland-colors)
    themes_dir="$HOME/.config/hypr/colors"
    active_theme_link_names=("current")
    theme_exts=("")
    post_exec+="hyprctl reload;"
    ;;
  alacritty)
    themes_dir="$HOME/.config/alacritty/themes"
    active_theme_link_names=("current")
    theme_exts=("")
    ;;
  notifications|dunst)
    themes_dir="$HOME/.config/dunst/themes"
    active_theme_link_names=("current")
    theme_exts=("")
    post_exec+="pkill dunst;"
    ;;
  dunst-app)
    config_file="$HOME/.config/dunst/themes/$("$(basename -- "$0")" dunst -c)/dunstrc"
    rc="$HOME/.config/dunst/themes/$("$(basename -- "$0")" dunst -c)/configrc"
    export notification_mode="$new_theme_name"

    [ -e "$rc" ] || {
      echo "$(basename -- "$0"): could not find rc file '$rc'"
      exit 1
    }

    . "$rc"

    cur_width="$(grep '^[ ]*width' < "$config_file" | awk '{print $3;}')"
    cur_height="$(grep '^[ ]*height' < "$config_file" | awk '{print $3;}')"
    cur_origin="$(grep '^[ ]*origin' < "$config_file" | awk '{print $3;}')"
    cur_alignment="$(grep '^[ ]*alignment' < "$config_file" | awk '{print $3;}')"

    if [ -n "$width" ]; then
      swap-value-in-file "$config_file" "width" "$cur_width" "$width" &&
        kill_dunst=1
    fi

    if [ -n "$height" ]; then
      swap-value-in-file "$config_file" "height" "$cur_height" "$height" &&
        kill_dunst=1
    fi

    if [ -n "$origin" ]; then
      swap-value-in-file "$config_file" "origin" "$cur_origin" "$origin" &&
        kill_dunst=1
    fi

    if [ -n "$alignment" ]; then
      swap-value-in-file "$config_file" "alignment" "$cur_alignment" "$alignment" &&
        kill_dunst=1
    fi

    [ -n "$kill_dunst" ] && post_exec+="pkill dunst;"
    ;;
  *)
    echo "$(basename -- "$0"): could not find context '$_ctx'"
    exit 2
    ;;
esac

# update each config link for new theme
if [ "${#active_theme_link_names[@]}" != "${#theme_exts[@]}" ]; then
  echo "$(basename -- "$0"): exactly one file ext for each config link name is expected"
  exit 5
else
  for ((i=0; i<"${#active_theme_link_names[@]}"; i++)); do
    run_command "${active_theme_link_names[$i]}" "${theme_exts[$i]}"
  done
fi

terminate

# TODO
# - global theme abstraction layer like in switch-mode
# - global themes that define which themes are set for each
#   context separately
#   - listed with -g -l
#   - set with -g [theme] like any other theme
# - optional theme option to toggle command to toggle
#   between last two themes only if either is given
#   theme, otherwise set given theme
# - prev and next options (then uncomment sxhkdrc shortcut)
# - modular structure making it easy to add/remove themes defined
#   in conf files (also providing theme name to be read from
#   selector - if not provided defaults to name currently used)
# - add rename (current) theme option
