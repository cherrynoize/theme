#!/usr/bin/env bash
# switch between dark and light modes
# author | cherrynoize
# https://github.com/cherrynoize/dotfiles

# file to save mode to
cur_mode_file="$HOME/.mode"

# notification id
nid="6699"

# contexts to switch when using global mode
declare -a all_ctxs=(
  "wpg"
  "wallpaper"
# "alacritty" # either wpg or alacritty
  "nvim"
# "polybar"
  "pywalfox"
  "conky"
)

# contexts to ignore post exec for in global mode
global_no_post_exec=("wpg" "polybar" "conky")

notification () {
  cur_mode="$(get_cur_mode)"

  if [ -n "$use_notification" ]; then
    if [ -z "$no_icon" ]; then
      icon="󰤄 "
      [ "$cur_mode" = "light" ] && icon="󰖨 "
    fi

    title="${1:-"$icon${cur_mode^} mode ${show_with_notification:-set}"}"
    body="$2"

    notify-send -r "$nid" "$title" "$body"
  fi
}

# do stuff then exit
terminate () {
  if [ "$RUN_CMD" != "0" ]; then
    eval "$post_exec"
  fi
  notification
  exit
}

get_cur_mode () {
  if [ -z "$_ctx" ]; then
    cat "$cur_mode_file"
  else
    if [ -e "${config_dir:-.}/${current_config}-dark$config_ext" ]; then
      echo light
    elif [ -e "${config_dir:-.}/${current_config}-light$config_ext" ]; then
      echo dark
    else
      cat "$cur_mode_file"
    fi
  fi
}

# returns opposite of param
mode-switch () {
  if [ "$1" = "dark" ]; then
    echo "light"
  elif [ "$1" = "light" ]; then
    echo "dark"
  fi
}

set_mode () {
  local context="$1"
  local new_mode="$2"

  if [ -n "$current_config" ]; then
    new_config="${config_dir:-.}/${current_config}-$new_mode$config_ext"
    old_config="${config_dir:-.}/${current_config}-$old_theme$config_ext"
    config_file="${config_dir:-.}/$current_config$config_ext"

    if [ -e "$new_config" ]; then
      if [ -e "$config_file" ]; then
        mv "$config_file" "$old_config"
      fi
      mv "$new_config" "$config_file"
    elif [ -e "$old_config" ]; then
      echo "$context: $new_mode mode already set."
    else
      echo "error: mode file '$new_config' not found."
      exit 3
    fi
  fi
}

# parse cli args
while [ -n "$1" ]; do
  case "$1" in
    -c|--current)
      RUN_CMD=0
      show_current=1
      shift
      ;;
    -o|--other)
      mode-switch "$(cat "$cur_mode_file")"
      exit
      ;;
    -f|--file)
      echo "$cur_mode_file"
      exit
      ;;
    -n|--notification)
      use_notification=1
      shift
      ;;
    -I|--no-icon)
      no_icon=1
      shift
      ;;
    -s|--show)
      RUN_CMD=0
      _mode="$(cat "$cur_mode_file")"
      use_notification=1
      show_with_notification=on
      shift
      ;;
    -g|--global)
      _ctx="$1"
      ;;
    -*)
      echo "error: unknown option $1"
      exit 2
      ;;
    *)
      # set context first then mode
      if [ -z "$_ctx" ]; then
        _ctx="$1"
      else
        _mode="$1"
      fi
      shift
      ;;
  esac
done

_mode="${_mode:-toggle}"

# set old theme to opposite mode
old_theme="$(mode-switch "$_mode")"

if [ "$_mode" == "toggle" ]; then
  # read last theme
  old_theme="$(cat "$cur_mode_file")"
  # set mode to opposite
  _mode="$(mode-switch "$old_theme")"
elif [ -z "$old_theme" ]; then
  echo "error: unknown mode $_mode"
  exit 2
fi

if [ -z "$_ctx" ] && [ -z "$show_current" ] && [ -z "$show_with_notification" ]; then
  _ctx="-g"
fi

case "$_ctx" in
  "")
    ;;
  -g|--global)
    for c in "${all_ctxs[@]}"; do
      # if context is contained in global no post exec group
      if [[ " ${global_no_post_exec[*]} " =~ " $c " ]]; then
        RUN_CMD=0
      else
        RUN_CMD=1
      fi

      # set mode for each context
      "$0" "$c" "$_mode"
    done
    echo "$_mode" > "$cur_mode_file"
    terminate
    ;;
  wallpaper)
    config_dir="$HOME/.wallpaper-themes/current"
    current_config="wallpaper"
    config_ext=""
    post_exec+="change-wallpaper -n -v;"
    ;;
  wpg)
    config_dir=""
    current_config=""
    config_ext=""

    wpg_conf="$HOME/.config/wpg/wpg.conf"
    wpg_mode="$(grep keywords < "$wpg_conf" | awk '{print $3;}')"
    new_mode="$_mode"

    # invert music fallback cover image
    gen_fallback_cover () {
      fallback_cover="$(music fcloc)"
      [ -f "$fallback_cover" ] &&
        post_exec+="convert -channel RGB \"$fallback_cover\" -negate \"$fallback_cover\";"
    }

    # update 'light_theme = true|false'
    toggle_light_theme () {
      _light_theme="$(sed -e 's/light/false/' -e 's/dark/true/' <<< "$_mode")"
      post_exec+="sed -i 's/light_theme = $_light_theme/light_theme = $(flip <<< "$_light_theme")/' $wpg_conf;"
    }

    # set keywords from old mode (and only in that case) to new mode
    update_keywords_set () {
      # verify wpg mode set is the opposite of mode to be set
      if [ "$wpg_mode" = "$(mode-switch "$new_mode")" ]; then
        post_exec+="sed -i 's/keywords = $wpg_mode/keywords = $new_mode/' $wpg_conf;"
      fi
    }

    # if mode is not already set
    if [ "$wpg_mode" != "$_mode" ]; then
      gen_fallback_cover
      toggle_light_theme
      update_keywords_set
      post_exec+="wpg -s \"$(wpg -c)\";" # regenerate colorscheme
    fi
    ;;
  alacritty)
    config_dir="$HOME/.config/alacritty/themes/current"
    current_config="colors"
    config_ext=".toml"
    ;;
  nvim)
    config_dir="$HOME/.config/nvim/lua/core"
    current_config="colorscheme"
    config_ext=".lua"
    post_exec+="launch-nvim -r;"
    ;;
  pywalfox)
    post_exec+="pywalfox \"$_mode\";"
    ;;
  conky)
    config_dir="$HOME/.config/conky"
    current_config="colors"
    config_ext=".lua"
    post_exec+="pgrep conky && launch-conky -r;"
    ;;
  polybar)
    config_dir="$HOME/.config/polybar/themes/current"
    current_config="colors"
    config_ext=".ini"
    post_exec+="dock reload;"
    ;;
  *)
    echo "error: unknown context $_ctx"
    exit 2
    ;;
esac

[ -n "$show_current" ] && {
  get_cur_mode
  terminate
}

[ -n "$show_with_notification" ] &&
  terminate

set_mode "$_ctx" "$_mode"
terminate
